import express from "express";
import dotenv from "dotenv";
import http from "http";
import { Server } from "socket.io";
import cors from "cors";
import client from "./lib/redis";
import { Room, RoomPermissions } from "./types/types";
import generateRandomHash from "./utils/generateHash/generateHash";
dotenv.config();
const app = express();
const port = process.env.LOCAL_PORT;

app.use(cors());
app.use(express.json());

const server = http.createServer(app);

export const io = new Server(server, {
  cors: {
    origin: `http://127.0.0.1:5173/`,
    methods: ["GET", "POST"],
  },
});

type userData = {
  displayName: string;
};

io.on("connection", (socket) => {
  /**
   * @param { String } roomNumber generated by sha25 hash
   * @param { String } userDisplayName
   * @param { Function } callback returns the state if the user is able to join the server or not.
   * When a user requests to join a room, redis client will chekc if the room exists in the cache
   */
  socket.on("join-room", async (roomNumber, userDisplayName, callback) => {
    const room = await client.get(roomNumber);
    if (room) {
      const roomData: Room = JSON.parse(room);
      socket.join(roomData.roomID);
      roomData.members.push(userDisplayName);

      // can feed more permissions to the client
      callback({
        success: true,
      });
    } else {
      callback({
        success: false,
      });
    }
  });

  /**
   * @param { String } userDisplayName
   * @param { RoomPermissions } permissions
   * @param { Function } callback returns the state if the user is able to join the server or not.
   */
  async function CreateRoom(
    userDisplayName: string,
    permissions: RoomPermissions,
    callback: Function
  ) {
    const roomHash = generateRandomHash(8);

    const newRoom: Room = {
      roomID: roomHash,
      status: false,
      members: [],
      permissions,
      owner: userDisplayName,
    };

    try {
    } catch {}
  }
  socket.on("create-room", CreateRoom);
});

server.listen(port, () => {
  console.log("Socket Server Running");
});
